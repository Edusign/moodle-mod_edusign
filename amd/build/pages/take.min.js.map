{"version":3,"file":"take.min.js","sources":["../../src/pages/take.js"],"sourcesContent":["/* eslint-disable no-async-promise-executor */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable promise/always-return */\n\n/**\n * Allows status form elements to be modified.\n *\n * @module    mod_edusign\n * @author    Sébastien Lampazona\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * Ex: https://moodledev.io/docs/guides/javascript/ajax\n */\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport dayjs from '../lib/dayjs';\nimport { add as addToast } from 'core/toast';\n\nconst getStudentIframeLink = function (studentId) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_get_signature_link_from_course',\n        args: {\n            sessionId,\n            userId: studentId,\n            userType: 'student',\n        }\n    }])[0]\n        .then(({ result }) => {\n            return result?.[0]?.SIGNATURE_LINK;\n        });\n};\n\nconst getTeacherIframeLink = function (teacherId) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_get_signature_link_from_course',\n        args: {\n            sessionId,\n            userId: teacherId,\n            userType: 'teacher',\n        }\n    }])[0]\n        .then(({ result }) => {\n            return result?.[0]?.SIGNATURE_LINK;\n        });\n};\n\nconst archiveSession = function (archiveState = true) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_archive_session',\n        args: {\n            sessionId,\n            archiveState,\n        }\n    }])[0]\n        .then((result) => {\n            window.location.href = '/mod/edusign/view.php?id=' + cmId;\n            return result;\n        });\n};\n\n// Fonction pour créer le select\nconst createHourAndMinutesSelect = (id = 'input-time', defaultValue = dayjs()) => {\n    const selectHour = document.createElement('select');\n    selectHour.id = `${id}-hour`;\n    selectHour.classList.add('mr-2');\n    selectHour.classList.add('form-control');\n\n    // Boucle pour générer les options pour les heures de 00 à 23\n    for (let hour = 0; hour <= 23; hour++) {\n        const option = document.createElement('option');\n        option.value = hour.toString().padStart(2, '0'); // Ajouter un 0 en tête si l'heure est inférieure à 10\n        option.textContent = hour.toString().padStart(2, '0') + ' h'; // Format HH\n        selectHour.appendChild(option);\n    }\n\n    // Sélecteur HTML pour les minutes\n    const selectMinute = document.createElement('select');\n    selectMinute.id = `${id}-minutes`;\n    // Boucle pour générer les options pour les minutes avec un intervalle de 5 minutes\n    for (let minute = 0; minute <= 55; minute += 5) {\n        const option = document.createElement('option');\n        option.value = minute.toString().padStart(2, '0'); // Ajouter un 0 en tête si les minutes sont inférieures à 10\n        option.textContent = minute.toString().padStart(2, '0') + ' min'; // Format MM\n        selectMinute.appendChild(option);\n    }\n\n    selectMinute.classList.add('form-control');\n\n    const container = document.createElement('div');\n    container.classList.add('input-group');\n\n    if (defaultValue.isValid()) {\n        selectHour.value = defaultValue.hour().toString().padStart(2, '0');\n        // Round the minutes to the nearest multiple of 5\n        const roundedMinutes = Math.round(defaultValue.minute() / 5) * 5;\n        if (roundedMinutes === 60) {\n            selectHour.value = (Number(selectHour.value) + 1).toString().padStart(2, '0');\n            selectMinute.value = '00';\n        } else {\n            selectMinute.value = roundedMinutes.toString().padStart(2, '0');\n        }\n    }\n    container.appendChild(selectHour);\n    container.appendChild(selectMinute);\n    return container;\n};\n\nconst cmId = Number(document.querySelector('.students-table').dataset.instanceId);\nconst sessionId = Number(document.querySelector('.students-table').dataset.sessionId);\n\nconst sendStudentSignEmail = (studentsId) => {\n    return sendMethod('send_sign_email', studentsId).then((result) => {\n        setTimeout(() => {\n            // A timeout to wait for the server to send the email, because mails are synced asynchronously\n            refreshView();\n        }, 4000);\n        return result;\n    });\n};\n\nconst setStudentAbsent = (studentId, comment) => {\n    return sendMethod('set_student_absent', [studentId], { comment });\n};\n\n/**\n * Opens a modal to manually sign\n * @param {String} userType\n * @param {Object} user\n * @returns Promise\n */\nconst askUserSignature = async function (userType, user) {\n    let iframeURL = null;\n    if (userType === 'student') {\n        iframeURL = await getStudentIframeLink(user.edusign_api_id);\n    } else {\n        iframeURL = await getTeacherIframeLink(user.edusign_api_id);\n    }\n    return Modal.create({\n        title: 'Signature',\n        body: (`\n            <iframe id=\"signature-iframe\" src=\"${iframeURL}\"></iframe>\n        `),\n        footer: '',\n        show: true,\n        removeOnClose: true,\n    }).then((modalInstance) => {\n        modalInstance.getRoot().addClass('signature-modal');\n\n        // A la fermeture de la modale, on rafraichit la vue\n        modalInstance.getRoot().on(ModalEvents.hidden, () => {\n            refreshView();\n        });\n\n        window.addEventListener(\"message\", ({data}) => {\n            modalInstance.hide();\n            if (data === 'accept-signature') {\n                refreshView();\n            }\n        });\n\n    });\n};\n\n/**\n * Opens a modal to add a comment to the student absence\n * @returns Promise\n */\nconst openModalAddCommentToStudentAbsence = function () {\n    return new Promise((resolve) => {\n        return ModalSaveCancel.create({\n            title: 'Student absence',\n            body: (`\n                <textarea placeholder=\"Add a comment for this absence (optionnaly)\" class=\"form-control\" id=\"input-comment\" aria-label=\"Comment for absence\"></textarea>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                resolve(document.querySelector('#input-comment').value);\n            });\n        });\n    });\n};\n\n/**\n * Opens a modal to set the student as delayed\n * @returns Promise\n */\nconst openModalSetStudentDelayed = function () {\n    return new Promise((resolve) => {\n        return ModalSaveCancel.create({\n            title: 'Student delay',\n            body: (`\n                <label for=\"input-delay\">Delay</label>\n                <div class=\"input-group mb-3\">\n                    <input type=\"number\" class=\"form-control\" id=\"input-delay\" aria-label=\"Minutes of delay\">\n                    <div class=\"input-group-append\">\n                        <span class=\"input-group-text\">minutes</span>\n                    </div>\n                </div>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                resolve(Number(document.querySelector('#input-delay').value));\n            });\n        });\n    });\n};\n\n/**\n * Opens a modal to set the student as early departure\n * @returns Promise\n */\nconst openModalSetStudentEarlyDeparture = function () {\n    return new Promise((resolve) => {\n        return ModalSaveCancel.create({\n            title: 'Student early departure',\n            body: (`\n                <label for=\"input-early-departure\">Early departure</label>\n                <div class=\"input-group mb-3\" id=\"input-early-departure-container\">\n                </div>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            const selects = createHourAndMinutesSelect('input-early-departure');\n            document.querySelector('#input-early-departure-container').appendChild(selects);\n\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                const hour = document.querySelector('#input-early-departure-hour').value;\n                const minutes = document.querySelector('#input-early-departure-minutes').value;\n\n                const departureDate = dayjs().hour(hour).minute(minutes);\n                resolve(departureDate);\n            });\n        });\n    });\n};\n\n/**\n * Set the student as delayed\n * @param {int} delay minutes to delay\n * @param {string} studentId\n * @returns Promise\n */\nconst setStudentDelayed = function (delay = 15, studentId) {\n    return sendMethod('set_student_delay', [studentId], { delay });\n};\n\nconst sendMethod = function (methodName, studentsId, args = {}) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_take_attendance',\n        args: {\n            cmId,\n            sessionId,\n            method: methodName,\n            studentsId: studentsId.join(','),\n            args: JSON.stringify(args || {})\n        }\n    }])[0]\n        .then((result) => {\n            refreshView();\n            return result;\n        });\n};\n\nconst refreshView = () => {\n    return Ajax.call([{\n        methodname: 'mod_edusign_get_students_and_teachers',\n        args: {\n            cmId,\n            sessionId,\n        }\n    }])[0].then(({ result }) => {\n        initTable(result.students);\n        initTeachers(result.teachers);\n        return result;\n    }).catch(async (error) => {\n        console.error(error);\n        addToast(await Str.get_string('refresh_error', 'mod_edusign', error?.message || 'An unknowed error has occured'), {\n            type: 'error'\n        });\n    });\n};\n\nconst initTeachers = function (teachers) {\n    const teachersList = document.querySelector('#teachersList');\n    teachersList.innerHTML = '';\n    const template = document.querySelector(\"#teachers\");\n\n    teachers.forEach((teacher) => {\n        const clone = template.content.cloneNode(true);\n        const teacherCard = clone.querySelector(\".teacher\");\n        const fullNameTeacher = clone.querySelector(\".teacher--name>strong\");\n        const actionsTeacher = clone.querySelector(\".teacher--actions\");\n        const teacherSignature = clone.querySelector(\".teacher--signature-img\");\n        initActionButtonForTeacher(teacher, actionsTeacher);\n\n        if (teacher.hasSigned) {\n            actionsTeacher.remove();\n            teacherSignature.src = teacher.signature;\n        } else {\n            teacherSignature.remove();\n        }\n\n        teacherCard.dataset.teacherId = teacher.edusign_api_id;\n        fullNameTeacher.textContent = teacher.firstname + ' ' + teacher.lastname;\n\n        teachersList.appendChild(clone);\n    });\n};\n\nconst initTable = async function (students) {\n    const tbody = document.querySelector(\"#studentListTbody\");\n    tbody.innerHTML = '';\n    const template = document.querySelector(\"#studentRow\");\n\n    // Sort students by firstname\n    const sortedStudents = students.sort((a, b) => {\n        return a.firstname.localeCompare(b.firstname);\n    });\n\n    const sortedStudentsPromise = sortedStudents.map(async (student) => {\n        const clone = template.content.cloneNode(true);\n        const studentTR = clone.querySelector(\"tr\");\n        const checkboxTD = clone.querySelector(\".user-checkbox\");\n        const fullNameTD = clone.querySelector(\".fullname\");\n        const presentialStateTD = clone.querySelector(\".presential-state\");\n        const actionsTD = clone.querySelector(\".actions\");\n\n        if (student.edusign_data?.signature) {\n            checkboxTD.setAttribute('disabled', 'disabled');\n            checkboxTD.setAttribute('data-toggle', 'tooltip');\n            checkboxTD.setAttribute('title', `This student has already signed`);\n        }\n        studentTR.dataset.studentId = student.edusign_api_id;\n        fullNameTD.textContent = student.firstname + ' ' + student.lastname;\n        presentialStateTD.innerHTML = await getStudentPresentialStateHTML(student);\n        initActionButtonForStudent(student, actionsTD);\n        return clone;\n    });\n    const allStudentsNodes = await Promise.all(sortedStudentsPromise);\n    tbody.append(...allStudentsNodes);\n    // Removes the disabled property of the sign button if at least one checkbox is checked\n    tbody.querySelectorAll('.user-checkbox').forEach((checkbox) => {\n        checkbox.addEventListener('change', function () {\n            const signSelectedBtn = document.querySelector('#sign-selected-btn');\n            if (tbody.querySelectorAll('.user-checkbox:checked').length > 0) {\n                signSelectedBtn.removeAttribute('disabled');\n                signSelectedBtn.removeAttribute('data-toggle');\n            } else {\n                signSelectedBtn.setAttribute('disabled', 'disabled');\n                signSelectedBtn.setAttribute('data-toggle', 'tooltip');\n            }\n        });\n    });\n};\n\nconst getStudentPresentialStateHTML = async function (student) {\n    let html = '';\n    let signatureHTML = '';\n\n    if (!student.edusign_data) {\n        html = `<span class=\"badge badge-default\">${await Str.get_string('noData', 'mod_edusign')}</span>`;\n    } else if (student.edusign_data.signature) {\n        html = `<span class=\"badge badge-success\">${await Str.get_string('present', 'mod_edusign')}</span>`;\n        signatureHTML = `<img src=\"${student.edusign_data.signature}\" style=\"height: 50px\" class=\"signature\" />`;\n    } else if (!student.edusign_data.signature && student.edusign_data.signatureEmail) {\n        html = `<span class=\"badge badge-info\">${await Str.get_string('waitingSignature', 'mod_edusign')}</span>`;\n    } else {\n        html = '<span class=\"badge badge-danger\">Absent</span>';\n    }\n    if (student.edusign_data?.delay > 0) {\n        html += `<span class=\"text-small text-muted\">${student.edusign_data.delay} ${await Str.get_string('minLate', 'mod_edusign')}</span>`;\n    }\n    if (student.edusign_data?.earlyDeparture) {\n        html += `<span class=\"text-small text-muted\">${await Str.get_string('departureAt', 'mod_edusign')} ${dayjs(student.edusign_data.earlyDeparture).format('HH:mm')} (${dayjs(session.date_end).diff(dayjs(student.edusign_data.earlyDeparture), 'minutes')} min)</span>`;\n    }\n    return `<div class=\"state-container\">\n                <div class=\"left-container\">${html}</div>\n                <div class=\"right-container\">${signatureHTML}</div>\n            </div>`;\n};\n\nconst initActionButtonForTeacher = function (teacher, context) {\n    // Allows a user to manually sign\n    context.querySelector('.manual-sign-btn--teacher').addEventListener('click', function () {\n        askUserSignature('teacher', teacher);\n    });\n};\n\nconst initActionButtonForStudent = function (student, context) {\n    // Allows a user to manually sign\n    context.querySelector('.manual-sign-btn').addEventListener('click', function () {\n        askUserSignature('student', student);\n    });\n\n    // Send an email to the student to sign the document\n    context.querySelector('.send-sign-email-btn').addEventListener('click', function () {\n        sendStudentSignEmail([student.edusign_api_id])\n            .then(async (data) => {\n                addToast(await Str.get_string('send_sign_email_success', 'mod_edusign'), {\n                    type: 'success'\n                });\n                return data;\n            })\n            .catch(async (error) => {\n                console.error(error);\n                addToast(await Str.get_string('send_sign_email_error', 'mod_edusign', error?.message || 'An unknowed error has occured'), {\n                    type: 'error'\n                });\n            });\n    });\n\n    // Set the student as absent\n    context.querySelector('.justified-abscence-btn').addEventListener('click', function () {\n        openModalAddCommentToStudentAbsence()\n            .then((comment) => {\n                return setStudentAbsent(student.edusign_api_id, comment);\n            })\n            .then(async (data) => {\n                addToast(await Str.get_string('set_student_absent_success', 'mod_edusign'), {\n                    type: 'success'\n                });\n                return data;\n            })\n            .catch(async (error) => {\n                console.error(error);\n                addToast(await Str.get_string('set_student_absent_error', 'mod_edusign', error?.message || 'An unknowed error has occured'), {\n                    type: 'error'\n                });\n            });\n    });\n\n    // Set the student as delayed\n    context.querySelector('.late-btn').addEventListener('click', function () {\n        // Opens a modal to set in minutes the delay of the student\n        openModalSetStudentDelayed()\n            .then((delay) => {\n                // Use the delay to set the student as delayed\n                return setStudentDelayed(delay, student.edusign_api_id);\n            })\n            .then(async (data) => {\n                addToast(await Str.get_string('set_student_delay_success', 'mod_edusign'), {\n                    type: 'success'\n                });\n                return data;\n            })\n            .catch(async (error) => {\n                console.error(error);\n                addToast(await Str.get_string('set_student_delay_error', 'mod_edusign', error?.message || 'An unknowed error has occured'), {\n                    type: 'error'\n                });\n            });\n    });\n\n    // Set the early departure of the student\n    context.querySelector('.early-departure-btn').addEventListener('click', function () {\n        // Opens a modal to set in minutes the early departure of the student\n        openModalSetStudentEarlyDeparture()\n            .then((earlyDeparture) => {\n                // Use the early departure to set the student as early departure\n                return sendMethod('set_student_early_departure', [student.edusign_api_id], { earlyDeparture: earlyDeparture.toISOString() });\n            })\n            .then(async (data) => {\n                addToast(await Str.get_string('set_student_early_departure_success', 'mod_edusign'), {\n                    type: 'success'\n                });\n                return data;\n            })\n            .catch(async (error) => {\n                console.error(error);\n                addToast(await Str.get_string('set_student_early_departure_error', 'mod_edusign', error?.message || 'An unknowed error has occured'), {\n                    type: 'error'\n                });\n            });\n    });\n};\nconst initCheckbox = function () {\n    // Allows to check or uncheck all the students\n    document.querySelector('#main-checkbox').addEventListener('change', function () {\n        document.querySelectorAll('.user-checkbox:not([disabled])').forEach((checkbox) => {\n            checkbox.checked = this.checked;\n            // Trigger change to update the sign button bellow\n            checkbox.dispatchEvent(new Event('change'));\n        });\n    });\n};\n\nconst initRefreshButton = function () {\n    // Allows to refresh the table\n    document.querySelector('#refresh-button').addEventListener('click', function () {\n        refreshView();\n    });\n};\n\nconst initSignButton = function () {\n    // Allows to send signature request for all checked users\n    document.querySelector('#sign-selected-btn').addEventListener('click', function () {\n        // Select all checked students\n        const studentsId = Array.from(document.querySelectorAll('.user-checkbox:checked')).map((checkbox) => {\n            return checkbox.closest('tr').dataset.studentId;\n        });\n        // Send them a signature request\n        sendStudentSignEmail(studentsId).then(async () => {\n            const mainCheckbox = document.querySelector('#main-checkbox');\n            mainCheckbox.checked = false;\n            document.querySelector('#main-checkbox').dispatchEvent(new Event('change'));\n            return addToast(await Str.get_string('send_sign_email_success', 'mod_edusign'), {\n                type: 'success'\n            });\n        }).catch(async (data) => {\n            addToast(await Str.get_string('send_sign_email_error', 'mod_edusign', data?.error || 'An unknowed error has occured'), {\n                type: 'error'\n            });\n        });\n    });\n};\n\nconst initArchiveButton = function () {\n    document.querySelector('#archive-session-btn').addEventListener('click', function () {\n        return new Promise(async (resolve, reject) => {\n            return ModalDeleteCancel.create({\n                title: await Str.get_string('archiveSession', 'mod_edusign'),\n                body: (`\n                    <p>${await Str.get_string('archiveSessionQuestion', 'mod_edusign')}</p>\n                `),\n                show: true,\n                removeOnClose: true,\n                buttons: {\n                    'delete': await Str.get_string('archive', 'mod_edusign'),\n                },\n            }).then((modalInstance) => {\n                modalInstance.getRoot().on(ModalEvents.delete, () => {\n                    archiveSession();\n                });\n                return modalInstance;\n            })\n                .then(resolve)\n                .catch(reject);\n        });\n    });\n};\n\n// eslint-disable-next-line no-unused-vars\nlet course = null;\nlet session = null;\n\nexport const init = async (students, teachers, _course, _session) => {\n    course = _course;\n    session = _session;\n    initTable(students);\n    initTeachers(teachers);\n    initCheckbox();\n    initRefreshButton();\n    initSignButton();\n    initArchiveButton();\n};\n"],"names":["cmId","Number","document","querySelector","dataset","instanceId","sessionId","sendStudentSignEmail","studentsId","sendMethod","then","result","setTimeout","refreshView","askUserSignature","async","userType","user","iframeURL","teacherId","studentId","edusign_api_id","Ajax","call","methodname","args","userId","_ref","_result$","SIGNATURE_LINK","_ref2","_result$2","Modal","create","title","body","footer","show","removeOnClose","modalInstance","getRoot","addClass","on","ModalEvents","hidden","window","addEventListener","_ref3","data","hide","openModalSetStudentEarlyDeparture","Promise","resolve","ModalSaveCancel","selects","id","defaultValue","selectHour","createElement","classList","add","hour","option","value","toString","padStart","textContent","appendChild","selectMinute","minute","container","isValid","roundedMinutes","Math","round","createHourAndMinutesSelect","save","minutes","departureDate","methodName","method","join","JSON","stringify","_ref4","initTable","students","initTeachers","teachers","catch","console","error","Str","get_string","message","type","teachersList","innerHTML","template","forEach","teacher","clone","content","cloneNode","teacherCard","fullNameTeacher","actionsTeacher","teacherSignature","initActionButtonForTeacher","hasSigned","remove","src","signature","firstname","lastname","tbody","sortedStudentsPromise","sort","a","b","localeCompare","map","studentTR","checkboxTD","fullNameTD","presentialStateTD","actionsTD","student","edusign_data","_student$edusign_data","setAttribute","getStudentPresentialStateHTML","initActionButtonForStudent","allStudentsNodes","all","append","querySelectorAll","checkbox","signSelectedBtn","length","removeAttribute","html","signatureHTML","signatureEmail","delay","_student$edusign_data3","earlyDeparture","format","session","date_end","diff","context","comment","setStudentAbsent","setStudentDelayed","toISOString","initArchiveButton","reject","ModalDeleteCancel","buttons","delete","archiveState","location","href","archiveSession","course","_course","_session","checked","this","dispatchEvent","Event","Array","from","closest"],"mappings":"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"}