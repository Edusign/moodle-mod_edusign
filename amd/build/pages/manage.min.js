define("mod_edusign/pages/manage",["exports","core/ajax","core/str","core/notification","core/modal_delete_cancel","core/modal_save_cancel","core/modal","../lib/dayjs","core/toast","core/modal_events"],(function(_exports,_ajax,Str,_notification,_modal_delete_cancel,_modal_save_cancel,_modal,_dayjs,Toast,_modal_events){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_ajax=_interopRequireDefault(_ajax),Str=_interopRequireWildcard(Str),_notification=_interopRequireDefault(_notification),_modal_delete_cancel=_interopRequireDefault(_modal_delete_cancel),_modal_save_cancel=_interopRequireDefault(_modal_save_cancel),_modal=_interopRequireDefault(_modal),_dayjs=_interopRequireDefault(_dayjs),Toast=_interopRequireWildcard(Toast),_modal_events=_interopRequireDefault(_modal_events);const toBase64=file=>new Promise(((resolve,reject)=>{const reader=new FileReader;reader.readAsDataURL(file),reader.onload=()=>resolve(reader.result),reader.onerror=reject})),archiveSessionHandler=function(sessionId,archiveState){return _ajax.default.call([{methodname:"mod_edusign_archive_session",args:{sessionId:sessionId,archiveState:archiveState}}])[0]},askRemoveSession=function(sessionId){return new Promise((async(resolve,reject)=>_modal_delete_cancel.default.create({title:await Str.get_string("removeSession","mod_edusign"),body:"\n                <p>".concat(await Str.get_string("removeSessionQuestions","mod_edusign"),'</p>\n                <div class="form-check form-switch">\n                    <input class="form-check-input" type="checkbox" role="switch" id="removeOnEdusign" checked>\n                    <label class="form-check-label" for="removeOnEdusign">\n                    ').concat(await Str.get_string("removeSessionAndSheet","mod_edusign"),"\n                    </label>\n                </div>\n            "),show:!0,removeOnClose:!0}).then((modalInstance=>(modalInstance.getRoot().on(_modal_events.default.delete,(()=>{const removeOnEdusign=document.querySelector("#removeOnEdusign").checked;(function(sessionId){let removeOnEdusign=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return _ajax.default.call([{methodname:"mod_edusign_remove_session",args:{sessionId:sessionId,withEdusignDelete:removeOnEdusign}}])[0]})(sessionId,removeOnEdusign).then(resolve).catch(reject)})),modalInstance)))))},onImportCSVUpdatedSessionsSubmit=async event=>{event.preventDefault();const form=event.target,button=form.querySelector("#import-csv-save");button.classList.add("is-loading");try{const formData=new FormData(form),sessions=Array.from(formData.entries()).filter((_ref=>{let[key]=_ref;return key.startsWith("sessions")})).map((_ref2=>{let[key,value]=_ref2;const[,index,field]=key.match(/sessions\[(\d+)\]\[(\w+)\]/);return{index:index,field:field,value:value}})).reduce(((acc,_ref3)=>{let{index:index,field:field,value:value}=_ref3;return acc[index]||(acc[index]={}),acc[index][field]=value,acc}),[]);return await async function(sessions){let form=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,hasError=!1;if(sessions.forEach(((session,index)=>{null==form||form.querySelector('[name="sessions['.concat(index,'][name]"]')).classList.remove("is-invalid"),session.name||(hasError=!0,null==form||form.querySelector('[name="sessions['.concat(index,'][name]"]')).classList.add("is-invalid"))})),sessions.forEach(((session,index)=>{let isInvalid=!1;null==form||form.querySelector('[name="sessions['.concat(index,'][start_date]"]')).classList.remove("is-invalid"),null==form||form.querySelector('[name="sessions['.concat(index,'][end_date]"]')).classList.remove("is-invalid"),session.start_date&&session.end_date||(isInvalid=!0),(0,_dayjs.default)(session.start_date).isValid()&&(0,_dayjs.default)(session.end_date).isValid()||(isInvalid=!0),(0,_dayjs.default)(session.start_date).isAfter((0,_dayjs.default)(session.end_date))&&(isInvalid=!0),hasError=hasError||isInvalid,isInvalid&&(null==form||form.querySelector('[name="sessions['.concat(index,'][start_date]"]')).classList.add("is-invalid"),null==form||form.querySelector('[name="sessions['.concat(index,'][end_date]"]')).classList.add("is-invalid"))})),hasError)throw new Error(await Str.get_string("sessions_have_errors","mod_edusign","Some sessions have errors, please check the form"));return sessions}(sessions,form),await function(sessions){return _ajax.default.call([{methodname:"mod_edusign_import_sessions",args:{sessions:sessions,cmId:cmId}}])[0].promise()}(sessions).then((result=>(button.classList.remove("is-loading"),result)))}catch(error){throw button.classList.remove("is-loading"),error}},addImportCSVTableFromData=async data=>{if(!data||!data.length)return void Toast.add(await Str.get_string("csv_no_data_found_error","mod_edusign","No data found in the CSV file"),{type:"danger"});const table=document.getElementById("import-csv-imported-form-table").content.cloneNode(!0),tbody=table.querySelector("tbody"),trTemplate=document.getElementById("import-csv-imported-line").content;data.forEach(((row,index)=>{const tr=trTemplate.cloneNode(!0),name=tr.querySelector(".name"),dateStart=tr.querySelector(".start_date"),dateEnd=tr.querySelector(".end_date");name.setAttribute("name","sessions[".concat(index,"][name]")),name.value=row.session_name,dateStart.value=row.start_date,dateStart.setAttribute("name","sessions[".concat(index,"][start_date]")),dateEnd.value=row.end_date,dateEnd.setAttribute("name","sessions[".concat(index,"][end_date]")),tbody.appendChild(tr)})),table.querySelector("#import-csv-form").addEventListener("submit",(event=>{onImportCSVUpdatedSessionsSubmit(event).then((()=>document.location.reload())).catch((error=>{console.error(error),Toast.add((null==error?void 0:error.message)||(null==error?void 0:error.error),{type:"danger"})}))})),document.getElementById("import-csv-table").innerHTML="",document.getElementById("import-csv-table").appendChild(table)},openModalImportSession=async()=>_modal.default.create({title:await Str.get_string("import_sessions","mod_edusign","Import sessions"),body:document.querySelector("#import-csv-modal").innerHTML,large:!0,show:!0,removeOnClose:!0}).then((modalInstance=>{const modalRoot=modalInstance.getRoot()[0];modalRoot.querySelector("#import-session-form").addEventListener("submit",(async event=>{event.preventDefault();const form=event.target;return(async file=>_ajax.default.call([{methodname:"mod_edusign_parse_csv",args:{base64File:await toBase64(file)}}])[0].promise().catch((async error=>{console.error(error),Toast.add(await Str.get_string("csv_import_error","mod_edusign",(null==error?void 0:error.error)||"An unknowed error has occured during the import"),{type:"danger"})})))(new FormData(form).get("csv-file")).then(addImportCSVTableFromData)}));return modalRoot.querySelector("#input-csv-file").addEventListener("change",(event=>{modalRoot.querySelector("#import-session-form").requestSubmit()})),modalInstance}));let cmId=null;_exports.init=async _cmId=>{cmId=_cmId;document.querySelectorAll(".remove-session").forEach((button=>{button.addEventListener("click",(async event=>{event.preventDefault();const sessionId=button.closest("tr").dataset.sessionId;await askRemoveSession(sessionId).then((async()=>window.location.reload())).catch((async data=>{_notification.default.addNotification({message:await Str.get_string("session_removed_error","mod_edusign",(null==data?void 0:data.error)||"An unknowed error has occured"),type:"error"})}))}))}));document.querySelectorAll(".archive-session").forEach((button=>{button.addEventListener("click",(async event=>{event.preventDefault();const sessionId=button.closest("tr").dataset.sessionId;await function(sessionId){return new Promise((async(resolve,reject)=>_modal_save_cancel.default.create({title:await Str.get_string("archiveSession","mod_edusign"),body:"\n                <p>".concat(await Str.get_string("archiveSessionQuestion","mod_edusign"),"</p>\n            "),show:!0,removeOnClose:!0}).then((modalInstance=>(modalInstance.getRoot().on(_modal_events.default.save,(()=>{archiveSessionHandler(sessionId,!0).then(resolve).catch(reject)})),modalInstance)))))}(sessionId).then((async()=>window.location.reload())).catch((async data=>{_notification.default.addNotification({message:await Str.get_string("session_archived_error","mod_edusign",(null==data?void 0:data.error)||"An unknowed error has occured"),type:"error"})}))}))}));document.querySelectorAll(".unarchive-session").forEach((button=>{button.addEventListener("click",(async event=>{event.preventDefault();const sessionId=button.closest("tr").dataset.sessionId;await function(sessionId){return new Promise((async(resolve,reject)=>_modal_save_cancel.default.create({title:await Str.get_string("unarchiveSession","mod_edusign"),body:"\n                <p>".concat(await Str.get_string("unarchiveSessionQuestion","mod_edusign"),"</p>\n            "),show:!0,removeOnClose:!0}).then((modalInstance=>(modalInstance.getRoot().on(_modal_events.default.save,(()=>{archiveSessionHandler(sessionId,!1).then(resolve).catch(reject)})),modalInstance)))))}(sessionId).then((async()=>window.location.reload())).catch((async data=>{_notification.default.addNotification({message:await Str.get_string("session_unarchived_error","mod_edusign",(null==data?void 0:data.error)||"An unknowed error has occured"),type:"error"})}))}))}));document.querySelector("#import-sessions").addEventListener("click",openModalImportSession)}}));

//# sourceMappingURL=manage.min.js.map