{"version":3,"file":"manage.min.js","sources":["../../src/pages/manage.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-async-promise-executor */\n/* eslint-disable promise/no-nesting */\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\nimport notification from 'core/notification';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\n\nconst removeSession = function(sessionId, removeOnEdusign = true) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_remove_session',\n        args: {\n            sessionId,\n            withEdusignDelete: removeOnEdusign,\n        }\n    }])[0];\n};\n\nconst archiveSessionHandler = function(sessionId, archiveState) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_archive_session',\n        args: {\n            sessionId,\n            archiveState,\n        }\n    }])[0];\n};\n\nconst askRemoveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalDeleteCancel.create({\n            title: await Str.get_string('removeSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('removeSessionQuestions', 'mod_edusign')}</p>\n                <div class=\"form-check form-switch\">\n                    <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"removeOnEdusign\" checked>\n                    <label class=\"form-check-label\" for=\"removeOnEdusign\">\n                    ${await Str.get_string('removeSessionAndSheet', 'mod_edusign')}\n                    </label>\n                </div>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.delete, () => {\n                const removeOnEdusign = document.querySelector('#removeOnEdusign').checked;\n                removeSession(sessionId, removeOnEdusign)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst askArchiveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalSaveCancel.create({\n            title: await Str.get_string('archiveSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('archiveSessionQuestion', 'mod_edusign')}</p>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                archiveSessionHandler(sessionId, true)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst askUnarchiveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalSaveCancel.create({\n            title: await Str.get_string('unarchiveSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('unarchiveSessionQuestion', 'mod_edusign')}</p>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                archiveSessionHandler(sessionId, false)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst openModalImportSession = async function() {\n    return Modal.create({\n        title: 'Import session',\n        body: document.querySelector('#import-csv-modal').innerHTML,\n        show: true,\n        removeOnClose: true,\n    }).then((modalInstance) => {\n        modalInstance.getRoot().querySelector('#import-session-form').addEventListener('submit', async(event) => {\n            event.preventDefault();\n            const form = event.target;\n            const formData = new FormData(form);\n            const file = formData.get('import-session-file');\n            const response = await Ajax.call([{\n                methodname: 'mod_edusign_import_session',\n                args: {\n                    file,\n                }\n            }])[0];\n            if (response.success) {\n                notification.addNotification({\n                    message: await Str.get_string('session_imported', 'mod_edusign'),\n                    type: 'success'\n                });\n                modalInstance.hide();\n                return window.location.reload();\n            } else {\n                notification.addNotification({\n                    message: await Str.get_string(\n                        'session_imported_error',\n                        'mod_edusign',\n                        response.error || 'An unknowed error has occured'\n                    ),\n                    type: 'error'\n                });\n            }\n        });\n        return modalInstance;\n    });\n};\n\n\nexport const init = async() => {\n    // Handles remove session\n    const removeButtons = document.querySelectorAll('.remove-session');\n    removeButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askRemoveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_removed_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n    // Handles archive session\n    const archiveButtons = document.querySelectorAll('.archive-session');\n    archiveButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askArchiveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_archived_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n    // Handles unarchive session\n    const unarchiveButtons = document.querySelectorAll('.unarchive-session');\n    unarchiveButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askUnarchiveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_unarchived_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n\n    // Handles import session button\n    const importSessionButton = document.querySelector('#import-sessions');\n    importSessionButton.addEventListener('click', async(event) => {\n        event.preventDefault();\n        openModalImportSession();\n    });\n};\n"],"names":["archiveSessionHandler","sessionId","archiveState","Ajax","call","methodname","args","askRemoveSession","Promise","async","resolve","reject","ModalDeleteCancel","create","title","Str","get_string","body","show","removeOnClose","then","modalInstance","getRoot","on","ModalEvents","delete","removeOnEdusign","document","querySelector","checked","withEdusignDelete","removeSession","catch","querySelectorAll","forEach","button","addEventListener","event","preventDefault","closest","dataset","window","location","reload","addNotification","message","data","error","type","ModalSaveCancel","save","askArchiveSession","askUnarchiveSession","Modal","innerHTML","form","target","file","FormData","get","response","success","hide","openModalImportSession"],"mappings":"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"}