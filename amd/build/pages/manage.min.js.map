{"version":3,"file":"manage.min.js","sources":["../../src/pages/manage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable no-async-promise-executor */\n/* eslint-disable promise/no-nesting */\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\nimport notification from 'core/notification';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport Modal from 'core/modal';\nimport dayjs from '../lib/dayjs';\nimport * as Toast from 'core/toast';\nimport ModalEvents from 'core/modal_events';\n\nconst toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n});\n\nconst removeSession = function(sessionId, removeOnEdusign = true) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_remove_session',\n        args: {\n            sessionId,\n            withEdusignDelete: removeOnEdusign,\n        }\n    }])[0];\n};\n\nconst archiveSessionHandler = function(sessionId, archiveState) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_archive_session',\n        args: {\n            sessionId,\n            archiveState,\n        }\n    }])[0];\n};\n\nconst askRemoveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalDeleteCancel.create({\n            title: await Str.get_string('removeSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('removeSessionQuestions', 'mod_edusign')}</p>\n                <div class=\"form-check form-switch\">\n                    <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"removeOnEdusign\" checked>\n                    <label class=\"form-check-label\" for=\"removeOnEdusign\">\n                    ${await Str.get_string('removeSessionAndSheet', 'mod_edusign')}\n                    </label>\n                </div>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.delete, () => {\n                const removeOnEdusign = document.querySelector('#removeOnEdusign').checked;\n                removeSession(sessionId, removeOnEdusign)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst askArchiveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalSaveCancel.create({\n            title: await Str.get_string('archiveSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('archiveSessionQuestion', 'mod_edusign')}</p>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                archiveSessionHandler(sessionId, true)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst askUnarchiveSession = function(sessionId) {\n    return new Promise(async(resolve, reject) => {\n        return ModalSaveCancel.create({\n            title: await Str.get_string('unarchiveSession', 'mod_edusign'),\n            body: (`\n                <p>${await Str.get_string('unarchiveSessionQuestion', 'mod_edusign')}</p>\n            `),\n            show: true,\n            removeOnClose: true,\n        }).then((modalInstance) => {\n            modalInstance.getRoot().on(ModalEvents.save, () => {\n                archiveSessionHandler(sessionId, false)\n                    .then(resolve)\n                    .catch(reject);\n            });\n            return modalInstance;\n        });\n    });\n};\n\nconst importSessionFromCSV = function(sessions) {\n    return Ajax.call([{\n        methodname: 'mod_edusign_import_sessions',\n        args: {\n            sessions,\n            cmId,\n        }\n    }])[0].promise();\n};\n\nconst validateSessions = async(sessions, form = null) => {\n    // Vérification des noms\n    let hasError = false;\n    sessions.forEach((session, index) => {\n        form?.querySelector(`[name=\"sessions[${index}][name]\"]`).classList.remove('is-invalid');\n        if (!session.name) {\n            hasError = true;\n            form?.querySelector(`[name=\"sessions[${index}][name]\"]`).classList.add('is-invalid');\n        }\n    });\n\n\n    // Vérification des dates\n    sessions.forEach((session, index) => {\n        let isInvalid = false;\n        form?.querySelector(`[name=\"sessions[${index}][start_date]\"]`).classList.remove('is-invalid');\n        form?.querySelector(`[name=\"sessions[${index}][end_date]\"]`).classList.remove('is-invalid');\n        if (!session.start_date || !session.end_date) {\n            isInvalid = true;\n        }\n        if (!dayjs(session.start_date).isValid() || !dayjs(session.end_date).isValid()) {\n            isInvalid = true;\n        }\n        if (dayjs(session.start_date).isAfter(dayjs(session.end_date))) {\n            isInvalid = true;\n        }\n        hasError = hasError || isInvalid;\n        if (isInvalid) {\n            form?.querySelector(`[name=\"sessions[${index}][start_date]\"]`).classList.add('is-invalid');\n            form?.querySelector(`[name=\"sessions[${index}][end_date]\"]`).classList.add('is-invalid');\n        }\n    });\n    if (hasError) {\n        throw new Error(await Str.get_string(\n            'sessions_have_errors',\n            'mod_edusign',\n            'Some sessions have errors, please check the form'\n        ));\n    }\n\n    return sessions;\n};\n\nconst onImportCSVUpdatedSessionsSubmit = async(event) => {\n    event.preventDefault();\n    const form = event.target;\n    const button = form.querySelector('#import-csv-save');\n    button.classList.add('is-loading');\n    try {\n        const formData = new FormData(form);\n        // Récupération des sessions\n        const sessions = Array.from(formData.entries())\n            .filter(([key]) => key.startsWith('sessions'))\n            .map(([key, value]) => {\n                const [, index, field] = key.match(/sessions\\[(\\d+)\\]\\[(\\w+)\\]/);\n                return {index, field, value};\n            })\n            .reduce((acc, {index, field, value}) => {\n                if (!acc[index]) {\n                    acc[index] = {};\n                }\n                acc[index][field] = value;\n                return acc;\n            }, []);\n\n        // Throw error if there is any\n        await validateSessions(sessions, form);\n\n        return await importSessionFromCSV(sessions)\n            .then((result) => {\n                button.classList.remove('is-loading');\n                return result;\n            });\n    } catch (error) {\n        button.classList.remove('is-loading');\n        throw error;\n    }\n};\n\nconst addImportCSVTableFromData = async(data) => {\n    if (!data || !data.length) {\n        Toast.add(\n            await Str.get_string(\n                'csv_no_data_found_error',\n                'mod_edusign',\n                'No data found in the CSV file'\n            ), {\n            type: 'danger'\n        });\n        return;\n    }\n    const table = document.getElementById('import-csv-imported-form-table').content.cloneNode(true);\n    const tbody = table.querySelector('tbody');\n    const trTemplate = document.getElementById('import-csv-imported-line').content;\n    data.forEach((row, index) => {\n        const tr = trTemplate.cloneNode(true);\n        const name = tr.querySelector('.name');\n        const dateStart = tr.querySelector('.start_date');\n        const dateEnd = tr.querySelector('.end_date');\n\n        name.setAttribute('name', `sessions[${index}][name]`);\n        name.value = row.session_name;\n        dateStart.value = row.start_date;\n        dateStart.setAttribute('name', `sessions[${index}][start_date]`);\n        dateEnd.value = row.end_date;\n        dateEnd.setAttribute('name', `sessions[${index}][end_date]`);\n        tbody.appendChild(tr);\n    });\n    table.querySelector('#import-csv-form').addEventListener('submit', (event) => {\n        onImportCSVUpdatedSessionsSubmit(event)\n            .then(() => {\n                return document.location.reload();\n            })\n            .catch((error) => {\n                console.error(error);\n                Toast.add(error?.message || error?.error, {\n                    type: 'danger'\n                });\n            });\n    });\n    document.getElementById('import-csv-table').innerHTML = '';\n    document.getElementById('import-csv-table').appendChild(table);\n};\n\nconst parseSessionsCSVFile = async(file) => {\n    return Ajax.call([{\n        methodname: 'mod_edusign_parse_csv',\n        args: {\n            base64File: await toBase64(file),\n        }\n    }])[0].promise()\n        .catch(async(error) => {\n            console.error(error);\n            Toast.add(\n                await Str.get_string(\n                    'csv_import_error',\n                    'mod_edusign',\n                    error?.error || 'An unknowed error has occured during the import'\n                ), {\n                type: 'danger'\n            });\n        });\n};\n\nconst openModalImportSession = async() => {\n    return Modal.create({\n        title: await Str.get_string(\n            'import_sessions',\n            'mod_edusign',\n            'Import sessions',\n        ),\n        body: document.querySelector('#import-csv-modal').innerHTML,\n        large: true,\n        show: true,\n        removeOnClose: true,\n    }).then((modalInstance) => {\n        const modalRoot = modalInstance.getRoot()[0];\n        modalRoot.querySelector('#import-session-form')\n            .addEventListener('submit', async(event) => {\n                event.preventDefault();\n                const form = event.target;\n                const formData = new FormData(form);\n                const file = formData.get('csv-file');\n\n                return parseSessionsCSVFile(file)\n                    .then(addImportCSVTableFromData);\n            });\n        const inputCSVFile = modalRoot.querySelector('#input-csv-file');\n        inputCSVFile.addEventListener('change', (event) => {\n            modalRoot.querySelector('#import-session-form').requestSubmit();\n        });\n        return modalInstance;\n    });\n};\n\n\nlet cmId = null;\nexport const init = async(_cmId) => {\n    cmId = _cmId;\n    // Handles remove session\n    const removeButtons = document.querySelectorAll('.remove-session');\n    removeButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askRemoveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_removed_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n    // Handles archive session\n    const archiveButtons = document.querySelectorAll('.archive-session');\n    archiveButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askArchiveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_archived_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n    // Handles unarchive session\n    const unarchiveButtons = document.querySelectorAll('.unarchive-session');\n    unarchiveButtons.forEach((button) => {\n        button.addEventListener('click', async(event) => {\n            event.preventDefault();\n            const sessionId = button.closest('tr').dataset.sessionId;\n            await askUnarchiveSession(sessionId)\n                .then(async() => {\n                    return window.location.reload();\n                })\n                .catch(async(data) => {\n                    notification.addNotification({\n                        message: await Str.get_string(\n                            'session_unarchived_error',\n                            'mod_edusign',\n                            data?.error || 'An unknowed error has occured'\n                        ),\n                        type: 'error'\n                    });\n                });\n        });\n    });\n\n\n    // Handles import session button\n    const importSessionButton = document.querySelector('#import-sessions');\n    importSessionButton.addEventListener('click', openModalImportSession);\n};\n"],"names":["toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","archiveSessionHandler","sessionId","archiveState","Ajax","call","methodname","args","askRemoveSession","async","ModalDeleteCancel","create","title","Str","get_string","body","show","removeOnClose","then","modalInstance","getRoot","on","ModalEvents","delete","removeOnEdusign","document","querySelector","checked","withEdusignDelete","removeSession","catch","onImportCSVUpdatedSessionsSubmit","event","preventDefault","form","target","button","classList","add","formData","FormData","sessions","Array","from","entries","filter","_ref","key","startsWith","map","_ref2","value","index","field","match","reduce","acc","hasError","forEach","session","remove","name","isInvalid","start_date","end_date","isValid","isAfter","Error","validateSessions","cmId","promise","importSessionFromCSV","error","addImportCSVTableFromData","data","length","Toast","type","table","getElementById","content","cloneNode","tbody","trTemplate","row","tr","dateStart","dateEnd","setAttribute","session_name","appendChild","addEventListener","location","reload","console","message","innerHTML","openModalImportSession","Modal","large","modalRoot","base64File","parseSessionsCSVFile","get","requestSubmit","_cmId","querySelectorAll","closest","dataset","window","addNotification","ModalSaveCancel","save","askArchiveSession","askUnarchiveSession"],"mappings":"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"}